const WebSocket = require('ws');

// Create WebSocket server on port 8080
const wss = new WebSocket.Server({ port: 8080 });

console.log('WebSocket server started on port 8080');

wss.on('connection', (ws) => {
    console.log('Client connected');
    
    ws.on('message', (message) => {
        try {
            // Parse incoming JSON message
            const data = JSON.parse(message);
            const { inputString, startPosition, terminator } = data;
            
            // Validate inputs
            if (typeof inputString !== 'string' || 
                typeof startPosition !== 'number' || 
                typeof terminator !== 'string') {
                ws.send(JSON.stringify({
                    error: 'Invalid input types. Expected: string, number, string'
                }));
                return;
            }
            
            if (startPosition < 0 || startPosition >= inputString.length) {
                ws.send(JSON.stringify({
                    error: 'Start position out of bounds'
                }));
                return;
            }
            
            // Find terminator starting from startPosition
            const searchString = inputString.substring(startPosition);
            const terminatorIndex = searchString.indexOf(terminator);
            
            let matchedString;
            let nextIndex;
            
            if (terminatorIndex === -1) {
                // Terminator not found - return rest of string
                matchedString = searchString;
                nextIndex = inputString.length; // String exhausted
            } else {
                // Terminator found - return string up to (but not including) terminator
                matchedString = searchString.substring(0, terminatorIndex);
                nextIndex = startPosition + terminatorIndex + terminator.length;
                
                // Ensure nextIndex doesn't exceed string length
                if (nextIndex > inputString.length) {
                    nextIndex = inputString.length;
                }
            }
            
            // Send response
            const response = {
                matchedString: matchedString,
                nextIndex: nextIndex,
                exhausted: nextIndex >= inputString.length
            };
            
            ws.send(JSON.stringify(response));
            
        } catch (error) {
            ws.send(JSON.stringify({
                error: 'Invalid JSON format or processing error: ' + error.message
            }));
        }
    });
    
    ws.on('close', () => {
        console.log('Client disconnected');
    });
    
    ws.on('error', (error) => {
        console.error('WebSocket error:', error);
    });
});

// Handle server shutdown gracefully
process.on('SIGINT', () => {
    console.log('\nShutting down server...');
    wss.close(() => {
        process.exit(0);
    });
});

// Example usage message
console.log(`
Example client message format:
{
    "start": 0,
    "buffer": "Hello,World!End",
    "terminator": ","
}

Expected response:
{
    "match": "Hello",
    "next": 6
}
`);
